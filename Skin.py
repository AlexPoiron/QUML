# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dFQmOKi3p_-jDM-SIFhZN6yz0CmOTO6p
"""

import pandas as pd
import numpy as np
import qiskit

from sklearn.model_selection import train_test_split
import time


ALPHA = 0.1
QUANTILE = 3
TEST_SIZE = 0.4
TRAIN_SIZE = 0.6

def standardise(x):
    return (x-np.mean(x))/np.std(x)

def rescaleFeature(x):
    return (1-ALPHA/2)*(np.pi/QUANTILE)*standardise(x)

class Skin:
  def __init__(self, pathname):
        self.path = pathname

  def get_pathname(self):
        return self.path

  def get_dict(self):
        return {
        "skin" : "000",
        "non-skin" : "111",
        }

def build_circuit(self, theta, omega):
    qc = qiskit.QuantumCircuit(3)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 1)
    qc.rx(np.pi/2, 2)
    qc.rz(omega[0], 0)
    qc.rz(omega[1], 1)
    qc.rz(omega[2], 2)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 1)
    qc.rx(np.pi/2, 2)
    #first thetas combination
    qc.cz(0, 2)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 2)
    qc.rz(theta[0], 0)
    qc.rz(theta[1], 2)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 2)
    #second thetas combination
    qc.cz(0, 1)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 1)
    qc.rz(theta[2], 0)
    qc.rz(theta[3], 1)
    qc.rx(np.pi/2, 0)
    qc.rx(np.pi/2, 1)
    #third thetas combination
    qc.cz(1, 2)
    qc.rx(np.pi/2, 1)
    qc.rx(np.pi/2, 2)
    qc.rz(theta[4], 1)
    qc.rz(theta[5], 2)
    qc.rx(np.pi/2, 1)
    qc.rx(np.pi/2, 2)
    return qc



def get_df(self):
  path = self.get_pathname()
  df = pd.read_csv(path, sep="\t")

  attributes = df.columns[:-1]
  for x in attributes:
    df[x] = rescaleFeature(df[x])
  return df

def get_sets(self):
        train_set, test_set = train_test_split(self.get_df(), test_size=TEST_SIZE, train_size=TRAIN_SIZE)
        train_set, test_set = pd.DataFrame(train_set), pd.DataFrame(test_set)
        
        return train_set, test_set

def define_skin():
    #Init Skin Class
    skin = Skin("data/Skin_NonSkin.txt")
    
    #Get useful informations
    df = skin.get_df()
    dict_qbits = skin.get_dict()
    train_set, test_set = skin.get_sets()
    theta_init = np.random.uniform(0, 2*np.pi, 8)
    
    parameters = {
        "df" : df, 
        "dict_qbits" : dict_qbits,
        "train_set" : train_set,
        "test_set" : test_set,
        "theta_init" : theta_init,
        "skin" : skin
        }
    
    #Init Classifier
    classifier_skin = Classifier.Classifier()
    return classifier_skin, parameters

def train_skin():
    classifier_iris, parameters = define_skin()
    print("Training the model...")
    start = time.time()
    
    theta_opti = classifier_skin.train(
        parameters["train_set"], 
        parameters["theta_init"], 
        parameters["dict_qbits"], 
        parameters["df"], 
        parameters["skin"]
    )
    
    end = time.time()
    minutes, seconds = divmod(end-start, 60)
    print("Training duration: {:0>2}min{:05.2f}s".format(int(minutes),seconds))
    return theta_opti

def get_skin_accuracy(theta_opti):
    classifier_skin, parameters = define_skin()
    #Accuracy
    #theta_opti = get_result("results/skin_result.txt")
    classifier_skin.accuracy(parameters["skin"], theta_opti, parameters["test_set"], parameters["dict_qbits"])
    return